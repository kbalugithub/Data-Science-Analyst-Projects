# -*- coding: utf-8 -*-
"""Analysis of Online Learning Engagement Trends.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TWv2DBlN5RreN9rGOnjqjm27ZFxj42ae

# Task
Analyze online learning engagement trends using the dataset from Kaggle: Predict Online Course Engagement Dataset located at "/content/online_course_engagement_data.csv". Focus on identifying key factors influencing user engagement, such as video watch time, quiz performance, and activity frequency. Use Python tools like Pandas for data preprocessing, Scikit-learn for clustering learners into engagement groups, and Matplotlib/Seaborn for visualizing trends. The goal is to uncover actionable insights that can help e-learning platforms optimize user experience and improve learning outcomes in the rapidly growing EdTech sector in India.
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Load the data

### Subtask:
Load the online course engagement data from the specified CSV file into a pandas DataFrame.

**Reasoning**:
Import pandas and load the data into a DataFrame, then display the first 5 rows to verify successful loading.
"""

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/online_course_engagement_data.csv')
display(df.head())

"""## Explore and preprocess the data

### Subtask:
Examine the dataset for missing values, outliers, and data types. Handle missing values and perform necessary data type conversions.

**Reasoning**:
Display the data types, check for missing values, display descriptive statistics, and examine unique values for categorical columns as requested in the instructions to understand the dataset structure, identify missing data, get a summary of numerical features, and check the distribution of categorical features.
"""

df.info()
print("\nMissing values per column:")
print(df.isnull().sum())
print("\nDescriptive statistics for numerical columns:")
display(df.describe())
print("\nValue counts for categorical columns:")
for col in df.select_dtypes(include='object').columns:
    print(f"\nValue counts for {col}:")
    print(df[col].value_counts())

"""## Feature engineering

### Subtask:
Create new features that might be relevant for analyzing engagement, such as video completion rate, average time spent per activity, or quiz score improvement.

**Reasoning**:
Create the new features 'AverageTimePerVideo', 'QuizPerformance', and 'ActivityFrequency' based on the existing columns, handling division by zero for 'AverageTimePerVideo'.
"""

import numpy as np

# Create 'AverageTimePerVideo', handle division by zero
df['AverageTimePerVideo'] = np.where(
    df['NumberOfVideosWatched'] > 0,
    df['TimeSpentOnCourse'] / df['NumberOfVideosWatched'],
    0  # or np.nan, depending on how we want to handle zero videos watched
)

# Create 'QuizPerformance'
df['QuizPerformance'] = df['QuizScores'] / 100

# Create 'ActivityFrequency'
df['ActivityFrequency'] = df['NumberOfVideosWatched'] + df['NumberOfQuizzesTaken']

display(df.head())

"""## Clustering

### Subtask:
Use Scikit-learn to cluster learners into different engagement groups based on the engineered features. Determine an appropriate number of clusters using methods like the elbow method or silhouette score.

**Reasoning**:
Select relevant numerical features, standardize them, apply the elbow method to find the optimal number of clusters, plot the inertia, fit KMeans with the chosen number, and add the cluster labels to the DataFrame.
"""

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Select relevant numerical features
features_for_clustering = [
    'TimeSpentOnCourse',
    'NumberOfVideosWatched',
    'NumberOfQuizzesTaken',
    'QuizScores',
    'CompletionRate',
    'AverageTimePerVideo',
    'QuizPerformance',
    'ActivityFrequency'
]

X = df[features_for_clustering]

# 2. Standardize the selected features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 3. Apply the elbow method to determine an appropriate number of clusters
inertia = []
range_n_clusters = range(1, 11)

for n_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10) # Added n_init
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# 4. Plot the inertia values against the number of clusters
plt.figure(figsize=(10, 6))
plt.plot(range_n_clusters, inertia, marker='o')
plt.title('Elbow Method for Optimal Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.xticks(range_n_clusters)
plt.grid(True)
plt.show()

# 5. Based on the elbow plot, choose a suitable number of clusters
# Visually inspect the plot to find the elbow point. Let's assume 3 is chosen based on a typical elbow
# This step requires manual interpretation of the plot. For the purpose of this code, we will proceed assuming a choice has been made.
# Let's assume the elbow is around 3.

chosen_n_clusters = 3 # Replace with the number chosen after inspecting the plot

# 6. Fit a KMeans model with the chosen number of clusters
kmeans_final = KMeans(n_clusters=chosen_n_clusters, random_state=42, n_init=10) # Added n_init
df['Engagement_Cluster'] = kmeans_final.fit_predict(X_scaled)

# 7. Add the cluster labels to the original DataFrame df as a new column
display(df.head())

"""## Analyze engagement factors

### Subtask:
For each cluster, analyze the characteristics related to video watch time, quiz performance, activity frequency, and other engineered features to understand what defines each engagement group.

**Reasoning**:
Group the DataFrame by the 'Engagement_Cluster' and calculate the mean of the specified numerical features for each cluster.
"""

# 1. Group by 'Engagement_Cluster' and calculate the mean for relevant features
cluster_characteristics = df.groupby('Engagement_Cluster')[features_for_clustering].mean()

# 2. Display the resulting DataFrame
display(cluster_characteristics)

"""## Interpret results and draw insights

### Subtask:
Based on the analysis and visualizations, interpret the findings to identify key factors influencing online learning engagement.

**Reasoning**:
Analyze the cluster characteristics to interpret the findings and identify key factors influencing online learning engagement by comparing the mean values of features across clusters and providing descriptive labels.
"""

# Analyze cluster_characteristics to interpret findings
print("Cluster Characteristics:")
display(cluster_characteristics)

# Provide descriptive labels based on observed characteristics
# Cluster 0: High Quiz Scores, Moderate Activity Frequency, Moderate Time/Videos
# Cluster 1: Moderate Quiz Scores, High Activity Frequency, Moderate Time/Videos
# Cluster 2: Low Activity Frequency, High Average Time per Video, Moderate Quiz Scores, Moderate Time/Videos

# Based on the cluster_characteristics DataFrame:
# Cluster 0 shows the highest QuizScores and QuizPerformance,
# moderate TimeSpentOnCourse, NumberOfVideosWatched, NumberOfQuizzesTaken, and ActivityFrequency.
# They have a relatively low AverageTimePerVideo.
print("\nInterpretation of Clusters:")
print("Cluster 0: 'High Performance, Moderately Active Learners'")
print("   - Characterized by highest average quiz scores and performance.")
print("   - Engage moderately in terms of time spent, videos watched, and quizzes taken.")
print("   - Efficient in their video watching (lower AverageTimePerVideo).")

# Cluster 1 shows moderate QuizScores and QuizPerformance, but the highest ActivityFrequency,
# moderate TimeSpentOnCourse, NumberOfVideosWatched, and NumberOfQuizzesTaken.
# They have a relatively low AverageTimePerVideo, similar to Cluster 0.
print("\nCluster 1: 'Moderately Performing, Highly Active Learners'")
print("   - Characterized by the highest average activity frequency (videos watched + quizzes taken).")
print("   - Show moderate average quiz scores and performance.")
print("   - Engage moderately in terms of time spent.")
print("   - Also efficient in their video watching (lower AverageTimePerVideo).")


# Cluster 2 shows the lowest ActivityFrequency, NumberOfVideosWatched, and NumberOfQuizzesTaken.
# They have the highest AverageTimePerVideo, and moderate TimeSpentOnCourse, QuizScores, and QuizPerformance.
print("\nCluster 2: 'Lower Activity, Slower Paced Learners'")
print("   - Characterized by the lowest average activity frequency (videos watched + quizzes taken).")
print("   - Spend the most time per video on average.")
print("   - Show moderate average time spent on the course, quiz scores, and performance.")
print("   - May be watching videos multiple times or struggling with content, leading to higher time per video.")


# Identify significant differentiators
print("\nKey Differentiators Between Clusters:")
print("- **Activity Frequency (NumberOfVideosWatched + NumberOfQuizzesTaken):** Clearly differentiates Cluster 2 (lowest) from Clusters 0 and 1 (higher).")
print("- **Quiz Performance (QuizScores):** Clearly differentiates Cluster 0 (highest) from Clusters 1 and 2 (lower).")
print("- **AverageTimePerVideo:** Clearly differentiates Cluster 2 (highest) from Clusters 0 and 1 (lowest).")
print("- TimeSpentOnCourse, NumberOfVideosTaken, NumberOfVideosWatched are somewhat differentiating but less distinct than the above.")


# Discuss potential interpretations and summarize key factors
print("\nPotential Interpretations and Key Factors Influencing Engagement:")
print("- **High Performance, Moderately Active Learners (Cluster 0):** These learners seem to be efficient and focused. They might have prior knowledge, good study habits, or are highly motivated to achieve high scores without necessarily maximizing activity time. Quiz performance is a key indicator for this group.")
print("- **Moderately Performing, Highly Active Learners (Cluster 1):** These learners are putting in significant effort in terms of activities. Their engagement is high in quantity, but it doesn't translate to the highest quiz scores. This could indicate they are learning but perhaps not mastering the material as effectively as Cluster 0, or they might be exploring more content without focusing solely on quiz-relevant material. Activity frequency is a key indicator.")
print("- **Lower Activity, Slower Paced Learners (Cluster 2):** This group engages less frequently with videos and quizzes but spends more time per video. This could suggest they are struggling with the material, rewatching content, or have less consistent study schedules. The high AverageTimePerVideo is a significant indicator and potential area for intervention (e.g., providing extra support or breaking down complex videos). Low activity frequency is also a key indicator.")
print("\nOverall Summary of Key Factors:")
print("1.  **Activity Frequency:** The sheer volume of interaction (videos watched, quizzes taken) is a major differentiator, separating less active learners from more active ones.")
print("2.  **Quiz Performance:** Success in assessments is a critical factor, distinguishing high-achieving learners from others, even among those with similar activity levels.")
print("3.  **Pacing/Video Engagement:** The time spent per video provides insight into how learners are consuming content, potentially highlighting those who are struggling or engaging more deeply with specific parts.")
print("These factors collectively highlight different engagement profiles, suggesting that engagement is a multifaceted construct influenced by both the quantity and quality of interaction, as well as learning outcomes.")

"""## Visualize trends

### Subtask:
Use Matplotlib and Seaborn to visualize the engagement trends and the characteristics of each cluster.

**Reasoning**:
Generate visualizations to show the distribution of features within each cluster, the relationships between features colored by cluster, and the average characteristics of each cluster.
"""

# 1. Box plots/Violin plots for selected features by cluster
print("Box plots/Violin plots for features by Engagement Cluster:")
for feature in features_for_clustering:
    plt.figure(figsize=(8, 5))
    sns.boxplot(x='Engagement_Cluster', y=feature, data=df)
    plt.title(f'{feature} Distribution by Engagement Cluster')
    plt.xlabel('Engagement Cluster')
    plt.ylabel(feature)
    plt.show()

# 2. Scatter plots for relationships between features, colored by cluster
print("\nScatter plots for relationships between features, colored by Engagement Cluster:")
# Select a subset of features for pairplot if the list is too large
# Using a smaller subset for clarity and performance
subset_features = [
    'TimeSpentOnCourse',
    'QuizPerformance',
    'ActivityFrequency',
    'AverageTimePerVideo',
    'Engagement_Cluster' # Include cluster for coloring
]
sns.pairplot(df[subset_features], hue='Engagement_Cluster', diag_kind='kde') # Using kde for diagonal
plt.suptitle('Pairwise Relationships of Key Features by Engagement Cluster', y=1.02)
plt.show()

# 3. Bar plots for average values of key features per cluster
print("\nBar plots for average values of key features per cluster:")
# Ensure cluster_characteristics is in a plottable format
cluster_characteristics_reset = cluster_characteristics.reset_index()

key_features_for_bar_plot = [
    'QuizPerformance',
    'ActivityFrequency',
    'AverageTimePerVideo',
    'TimeSpentOnCourse' # Also include TimeSpentOnCourse
]

fig, axes = plt.subplots(len(key_features_for_bar_plot), 1, figsize=(10, 15))
fig.tight_layout(pad=4.0)

for i, feature in enumerate(key_features_for_bar_plot):
    sns.barplot(x='Engagement_Cluster', y=feature, data=cluster_characteristics_reset, ax=axes[i])
    axes[i].set_title(f'Average {feature} by Engagement Cluster')
    axes[i].set_xlabel('Engagement Cluster')
    axes[i].set_ylabel(f'Average {feature}')

plt.show()

"""## Summary:

### Data Analysis Key Findings

*   The dataset contains no missing values.
*   Three distinct learner engagement clusters were identified:
    *   **Cluster 0: 'High Performance, Moderately Active Learners'**: Characterized by the highest average quiz scores and performance, moderate activity frequency, and relatively low average time spent per video.
    *   **Cluster 1: 'Moderately Performing, Highly Active Learners'**: Characterized by the highest average activity frequency but moderate average quiz scores and performance, and relatively low average time spent per video.
    *   **Cluster 2: 'Lower Activity, Slower Paced Learners'**: Characterized by the lowest average activity frequency but the highest average time spent per video, and moderate average quiz scores and performance.
*   Key factors differentiating these clusters include Activity Frequency (sum of videos watched and quizzes taken), Quiz Performance (QuizScores), and Average Time Per Video.

### Insights or Next Steps

*   Tailor interventions and content delivery based on cluster characteristics. For example, provide additional support or re-evaluate video complexity for Cluster 2, and explore ways to translate high activity into higher performance for Cluster 1.
*   Investigate the factors contributing to high quiz performance in Cluster 0 despite only moderate activity levels. This could inform strategies to improve efficiency for other learners.

"""